import datetime
import logging
from pathlib import Path


class MarkdownExporter:
    """–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç Markdown.
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Markdown —Ñ–∞–π–ª–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª—é–¥—è—Ö,
    –≤–∫–ª—é—á–∞—è –∫—Ä–∞—Ç–∫–∏–µ —Å–ø—Ä–∞–≤–∫–∏, —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.
    Attributes:
        output_dir (Path): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π
    """

    def __init__(self, output_dir: str = "reports") -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ Markdown.
        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤.
                       –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "reports".
        """
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        self.logger = logging.getLogger(__name__)
        self.logger.debug(f"MarkdownExporter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {output_dir}")

    def create_filename(self, first_name: str,
                        last_name: str, extension: str = "md"
                        ) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î_–§–∞–º–∏–ª–∏—è_–ò–º—è.md.
        Args:
            first_name: –ò–º—è —á–µ–ª–æ–≤–µ–∫–∞
            last_name: –§–∞–º–∏–ª–∏—è —á–µ–ª–æ–≤–µ–∫–∞
            extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "md"
        Returns:
            str: –ò–º—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç–∞_—Ñ–∞–º–∏–ª–∏—è_–∏–º—è.—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        """
        date_str = datetime.datetime.now().strftime("%Y-%m-%d")
        name_clean = self._sanitize_filename(f"{last_name}_{first_name}")
        filename = f"{date_str}_{name_clean}.{extension}"

        self.logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞: {filename}")
        return filename

    def _sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
        Args:
            filename: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        Returns:
            str: –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        """
        sanitized = filename.replace(" ", "_").replace("/", "-")
        sanitized = sanitized.replace("\\", "-").replace(":", "-")
        sanitized = sanitized.replace("*", "-").replace("?", "-")
        sanitized = sanitized.replace("\"", "-").replace("<", "-")
        sanitized = sanitized.replace(">", "-").replace("|", "-")

        return sanitized

    def export_to_md(self,
                    first_name: str,
                    last_name: str,
                    content: str,
                    urls: list[str],
                    personal_channel: str = "") -> str:
        """–°–æ–∑–¥–∞–µ—Ç MD —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–µ–ª–æ–≤–µ–∫–µ.
        Args:
            first_name: –ò–º—è —á–µ–ª–æ–≤–µ–∫–∞
            last_name: –§–∞–º–∏–ª–∏—è —á–µ–ª–æ–≤–µ–∫–∞
            content: –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ
            urls: –°–ø–∏—Å–æ–∫ URL –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            personal_channel: Username –ª–∏—á–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        self.logger.info(
            f"–ù–∞—á–∞–ª–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {first_name} {last_name}. "
            f"–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(urls)}, –∫–∞–Ω–∞–ª: {personal_channel or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )

        filename = self.create_filename(first_name, last_name)
        filepath = self.output_dir / filename

        try:
            md_content = self._generate_md_content(
                first_name, last_name, content, urls, personal_channel
            )

            self._write_md_file(filepath, md_content)
            self.logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filepath}")
            return str(filepath)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
            return ""

    def _generate_md_content(self,
                           first_name: str,
                           last_name: str,
                           content: str,
                           urls: list[str],
                           personal_channel: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ MD —Ñ–∞–π–ª–∞.
        Args:
            first_name: –ò–º—è —á–µ–ª–æ–≤–µ–∫–∞
            last_name: –§–∞–º–∏–ª–∏—è —á–µ–ª–æ–≤–µ–∫–∞
            content: –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ
            urls: –°–ø–∏—Å–æ–∫ URL –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            personal_channel: Username –ª–∏—á–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞
        Returns:
            str: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ Markdown —Ñ–∞–π–ª–∞
        """
        date_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")

        md_parts = [
            self._generate_header(first_name, last_name),
            self._generate_summary_section(content),
            self._generate_channel_section(personal_channel),
            self._generate_sources_section(urls),
            self._generate_footer(date_str)
        ]

        return "\n".join(filter(None, md_parts))

    def _generate_header(self, first_name: str, last_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Markdown —Ñ–∞–π–ª–∞.
        Args:
            first_name: –ò–º—è —á–µ–ª–æ–≤–µ–∫–∞
            last_name: –§–∞–º–∏–ª–∏—è —á–µ–ª–æ–≤–µ–∫–∞
        Returns:
            str: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        return f"""# {first_name} {last_name}

---

"""

    def _generate_summary_section(self, content: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª —Å –∫—Ä–∞—Ç–∫–æ–π —Å–ø—Ä–∞–≤–∫–æ–π.
        Args:
            content: –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ
        Returns:
            str: –†–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        return f"""## üìã –ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞

{content}

"""

    def _generate_channel_section(self, personal_channel: str) -> str | None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Telegram-–∫–∞–Ω–∞–ª–µ.
        Args:
            personal_channel: Username –ª–∏—á–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞
        Returns:
            str: –†–∞–∑–¥–µ–ª –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –∏–ª–∏ None –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω
        """
        if not personal_channel:
            return None

        return f"""## üì¢ Telegram-–∫–∞–Ω–∞–ª

[{personal_channel}](https://t.me/{personal_channel})

"""

    def _generate_sources_section(self, urls: list[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        Args:
            urls: –°–ø–∏—Å–æ–∫ URL –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        Returns:
            str: –†–∞–∑–¥–µ–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        sources_section = f"""## üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: **{len(urls)}**

"""

        for i, url in enumerate(urls, 1):
            domain = self._extract_domain(url)
            sources_section += f"{i}. [{domain}]({url})\n"

        return sources_section

    def _extract_domain(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ URL.
        Args:
            url: URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        Returns:
            str: –î–æ–º–µ–Ω –∏–∑ URL
        """
        try:
            domain = url.split('//')[-1].split('/')[0]
            return domain
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ –∏–∑ URL {url}: {e}")
            return url

    def _generate_footer(self, date_str: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–≤–∞–ª Markdown —Ñ–∞–π–ª–∞.
        Args:
            date_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        Returns:
            str: –ü–æ–¥–≤–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        return f"""
---

*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Perplexity AI: {date_str}*
"""

    def _write_md_file(self, filepath: Path, content: str) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ Markdown —Ñ–∞–π–ª.
        Args:
            filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø–∏—Å–∏
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        Raises:
            IOError: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
            Exception: –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏
        """
        try:
            filepath.write_text(content, encoding='utf-8')
            self.logger.debug(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω: {filepath}")
        except OSError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
            raise
        except Exception as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
            raise

    def get_output_directory(self) -> Path:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤.
        Returns:
            Path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
        """
        return self.output_dir
